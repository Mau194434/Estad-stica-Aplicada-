model <- lm(MIF ~  TAF + PIBPC , data =
pib_tasa_mortalidad)
summary(model)
y_hat = x%*%betas
hist(y_hat)
hist(y,add= TRUE, col = "green")
y_hat = x%*%betas
hist(y_hat)
hist(y,add= TRUE, col = "red")
t(x)%*%x
y = as.matrix(y)
x = as.matrix(x)
model <- lm(MIF ~  TAF + PIBPC , data =
pib_tasa_mortalidad)
summary(model)
install.packages("readxl")
library(readxl)
# Supongamos que tu archivo se llama "GASTO_COMIDA_TOTAL.xlsx"
datos <- read_excel("GASTO_COMIDA_TOTAL.xlsx")
#| code-fold: true
#| warning: false
#| message: false
library(tidyverse)
library(sf)          # Para datos espaciales
library(viridis)     # Para paletas de colores
library(janitor)    # Para limpiar nombres de columnas
library(scales)     # Para mejorar ejes en gráficos
#| code-fold: true
#| fig-width: 7
#| fig-align: center
#municipios_Queretaro <- st_read("1_estadistica_descriptiva/data/22mun.shp", options = "ENCODING=LATIN1", quiet = TRUE)
municipios_Queretaro <- st_read("data/22mun.shp", options = "ENCODING=LATIN1", quiet = TRUE)
# Crear mapa de municipios de Queretaro
mapa_municipios <- ggplot(municipios_Queretaro) +
geom_sf(fill = "lightgreen", color = "white", size = 0.3) +
labs(
title = "Municipios de Queretaro",
subtitle = paste("Total de municipios:", nrow(municipios_Queretaro)),
caption = "Fuente: INEGI - Marco Geoestadístico"
) +
theme_void() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 10)
)
print(mapa_municipios)
#| code-fold: true
#| warning: false
#| message: false
#datos_total <- read_csv("1_estadistica_descriptiva/data/cpv_valor_22.csv", na = c("ND"))
datos_total <- read_csv("data/cpv_valor_22.csv", na = c("ND"))
datos_total <- datos_total |> filter(año == 2020)
#table(datos_total$indicador)
datos_seleccion <- datos_total |>
filter(indicador %in% c("Edad mediana", "Población total","Porcentaje de población de 15 años y más con escolaridad básica, Porcentaje de hombres de 15 a 29 años","Promedio de hijos nacidos vivos por grupo de edad: 15-19","Porcentaje de población de 15 años y más con escolaridad básica","Porcentaje de la población de 15 a 24 años que asiste a la escuela","Porcentaje de población de 15 años y más sin escolaridad","Porcentaje de la población de 15 a 29 años con limitación en la actividad","Porcentaje de mujeres de 15 a 19 años","Población de 15 a 19 años", "Población de 6 a 14 años que sabe leer y escribi","Población con limitación en la actividad para hablar o comunicarse","Población de 8 a 14 años que sabe leer y escribir","Edad mediana hombres","Edad mediana mujeres" ),desc_municipio != "Estata,l") |>
select(desc_municipio, indicador, valor)
#| code-fold: true
#| fig-width: 8
#| fig-align: center
ggplot(datos) +
geom_sf(aes(fill = poblacion_de_15_a_19_anos), color = "white", size = 0.1) +
scale_fill_viridis_c(
name = "poblacion_de_15_a_19_anos"
) +
labs(
title = "Poblacion de 15 a 19 años de los Municipios de Queretaro",
caption = "Fuente: INEGI - Marco Geoestadístico"
) +
theme_void() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 10),
legend.position = "right"
)
#| code-fold: true
#| fig-width: 8
#| fig-align: center
ggplot(datos_seleccion) +
geom_sf(aes(fill = poblacion_de_15_a_19_anos), color = "white", size = 0.1) +
scale_fill_viridis_c(
name = "poblacion_de_15_a_19_anos"
) +
labs(
title = "Poblacion de 15 a 19 años de los Municipios de Queretaro",
caption = "Fuente: INEGI - Marco Geoestadístico"
) +
theme_void() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 10),
legend.position = "right"
)
library(ggplot2)
library(dplyr)
# Barras comparando escolaridad por municipio
ggplot(datos, aes(x = reorder(NOMGEO, porcentaje_de_la_poblacion_de_15_a_24_anos_que_asiste_a_la_escuela),
y = porcentaje_de_la_poblacion_de_15_a_24_anos_que_asiste_a_la_escuela)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(title = "Asistencia escolar (15-24 años) por municipio",
x = "Municipio", y = "Porcentaje de asistencia escolar") +
theme_minimal()
#| code-fold: true
#| warning: false
#| message: false
#datos_total <- read_csv("1_estadistica_descriptiva/data/cpv_valor_22.csv", na = c("ND"))
datos_total <- read_csv("data/cpv_valor_22.csv", na = c("ND"))
datos_total <- datos_total |> filter(año == 2020)
#table(datos_total$indicador)
datos_seleccion <- datos_total |>
filter(indicador %in% c("Edad mediana", "Población total","Porcentaje de población de 15 años y más con escolaridad básica, Porcentaje de hombres de 15 a 29 años","Promedio de hijos nacidos vivos por grupo de edad: 15-19","Porcentaje de población de 15 años y más con escolaridad básica","Porcentaje de la población de 15 a 24 años que asiste a la escuela","Porcentaje de población de 15 años y más sin escolaridad","Porcentaje de la población de 15 a 29 años con limitación en la actividad","Porcentaje de mujeres de 15 a 19 años","Población de 15 a 19 años", "Población de 6 a 14 años que sabe leer y escribi","Población con limitación en la actividad para hablar o comunicarse","Población de 8 a 14 años que sabe leer y escribir","Edad mediana hombres","Edad mediana mujeres" ),desc_municipio != "Estata,l") |>
select(desc_municipio, indicador, valor)
#| code-fold: true
#| warning: false
#| message: false
datos <- datos_seleccion |>
pivot_wider(names_from = indicador, values_from = valor)
datos <- datos |>
clean_names()
# Corrección de nombres de municipios
datos <- datos |>
mutate(desc_municipio = if_else(desc_municipio == "EL Arenal", "El Arenal", desc_municipio))
datos <- datos |>
mutate(NOMGEO = desc_municipio)
#| code-fold: true
summary(datos)
#| code-fold: true
datos <- left_join(municipios_Queretaro, datos)
#| code-fold: true
#| fig-width: 8
#| fig-align: center
ggplot(datos) +
geom_sf(aes(fill = edad_mediana), color = "white", size = 0.1) +
scale_fill_viridis_c(name = "Edad (mediana)") +
labs(
title = "Edad (mediana) de los Municipios de Querétaro",
caption = "Fuente: INEGI - Marco Geoestadístico"
) +
theme_void()
#| code-fold: true
#| fig-width: 8
#| fig-align: center
ggplot(datos) +
geom_sf(aes(fill = poblacion_de_15_a_19_anos), color = "white", size = 0.1) +
scale_fill_viridis_c(
name = "poblacion_de_15_a_19_anos"
) +
labs(
title = "Poblacion de 15 a 19 años de los Municipios de Queretaro",
caption = "Fuente: INEGI - Marco Geoestadístico"
) +
theme_void() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 10),
legend.position = "right"
)
library(ggplot2)
library(dplyr)
# Barras comparando escolaridad por municipio
ggplot(datos, aes(x = reorder(NOMGEO, porcentaje_de_la_poblacion_de_15_a_24_anos_que_asiste_a_la_escuela),
y = porcentaje_de_la_poblacion_de_15_a_24_anos_que_asiste_a_la_escuela)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(title = "Asistencia escolar (15-24 años) por municipio",
x = "Municipio", y = "Porcentaje de asistencia escolar") +
theme_minimal()
ggplot(datos, aes(x = poblacion_de_15_a_19_anos,
y = porcentaje_de_poblacion_de_15_anos_y_mas_sin_escolaridad)) +
geom_point(color = "tomato", size = 3) +
labs(title = "Relación entre población 15-19 y % sin escolaridad",
x = "Población de 15 a 19 años",
y = "% de población 15+ sin escolaridad") +
theme_minimal()
ggplot(datos, aes(x = porcentaje_de_la_poblacion_de_15_a_24_anos_que_asiste_a_la_escuela,
y = porcentaje_de_poblacion_de_15_anos_y_mas_sin_escolaridad)) +
geom_point(aes(color = NOMGEO), size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "black") +
labs(title = "Asistencia escolar vs Rezago educativo",
x = "% que asiste a la escuela (15-24)",
y = "% sin escolaridad (15+)") +
theme_minimal()
ggplot(datos, aes(x = "", y = promedio_de_hijos_nacidos_vivos_por_grupo_de_edad_15_19)) +
geom_boxplot(fill = "orange") +
labs(title = "Distribución del promedio de hijos nacidos vivos (15-19)",
x = "", y = "Promedio de hijos") +
theme_minimal()
ggplot(datos, aes(x = porcentaje_de_mujeres_de_15_a_19_anos,
y = porcentaje_de_la_poblacion_de_15_a_24_anos_que_asiste_a_la_escuela)) +
geom_point(color = "purple", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "black") +
labs(title = "Mujeres 15-19 vs asistencia escolar (15-24)",
x = "% mujeres 15-19",
y = "% que asiste a la escuela (15-24)") +
theme_minimal()
library(readr)
VALOR_AGREGADO_MANO_DE_OBRA <- read_csv("~/UNAM/5to Semestre/Econometría/VALOR_AGREGADO_MANO_DE_OBRA.csv")
library(readr)
DOC_20251013_WA0002 <- read_csv("Estadistica Aplicada/DOC-20251013-WA0002.csv")
View(DOC_20251013_WA0002)
head(VALOR_AGREGADO_MANO_DE_OBRA)
head(VALOR_AGREGADO_MANO_DE_OBRA)
head(VALOR_AGREGADo)
head(VALOR_AGREGADo)
head(VALOR_AGREGADO)
head(VALOR_AGREGADO)
head(VALOR_AGREGADO)
head(VALOR_AGREGADO.CSV)
head(VALOR_AGREGADO.csv)
library(readr)
VALOR_AGREGADO <- read_csv("Estadistica Aplicada/VALOR_AGREGADO.csv")
View(VALOR_AGREGADO)
head(VALOR_AGREGADO)
model<-gls(log(y_produccion)~log(x3_inversion), data=VALOR_AGREGADO, weights = varfixed~sigma))
model<-gls(log(y_produccion)~log(x3_inversion), data=VALOR_AGREGADO, weights = varfixed(~sigma))
library(nlme)
library(nlme)
library(nlme)
model<-gls(log(y_produccion)~log(x3_inversion), data=VALOR_AGREGADO, weights = varfixed(~sigma))
model<-gls(log(y_produccion)~log(x3_inversion), data=VALOR_AGREGADO, weights = varfixed(~sigma))
model <- lm(log(y_produccion)~log(x3_inversion), data=VALOR_AGREGADO)
model <- lm(log(Y_produccion)~log(x3_inversion), data=VALOR_AGREGADO)
head(VALOR_AGREGADO)
model <- lm(log(Y_produccion)~log(x3_inversion), data=VALOR_AGREGADO)
library(readr)
VALOR_AGREGADO <- read_csv("Estadistica Aplicada/VALOR_AGREGADO.csv")
View(VALOR_AGREGADO)
head(VALOR_AGREGADO)
model <- lm(log(Y_produccion)~log(x3_inversion), data=VALOR_AGREGADO)
colnames(VALOR_AGREGADO)<-c("area","y_produccion","x_2_mano_de_obra","x_3_inversion")
colnames(VALOR_AGREGADO)<-c("area","y_produccion","x_2_mano_de_obra","x_3_inversion")
head(VALOR_AGREGADO)
library(nlme)
model <- lm(log(Y_produccion)~log(x3_inversion), data=VALOR_AGREGADO)
model <- lm(log(Y_produccion)~log(x3_inversion), data=VALOR_AGREGADO)
model <- lm(log(y_produccion)~log(x3_inversion), data=VALOR_AGREGADO)
model <- lm(log(y_produccion)~log(x_3_inversion), data=VALOR_AGREGADO)
summary(model)
sigma <- abs(residuals(model))
model<-gls(log(y_produccion)~log(x_3_inversion), data=VALOR_AGREGADO, weights = varFixed(~sigma))
model<-gls(log(y_produccion)~log(x_3_inversion), data=VALOR_AGREGADO, weights = varFixed(~sigma))
summary(model)
sigma/2
VALOR_AGREGADO$sigma_cuadrada<-log(sigma/2)
VALOR_AGREGADO$log_x3<-log(VALOR_AGREGADO$x_3_inversion)
VALOR_AGREGADO$sigma_cuadrada<-log(sigma/2)
VALOR_AGREGADO$log_x3<-log(VALOR_AGREGADO$x_3_inversion)
model<-lm(sigma_cuadrada)~x_3, data= VALOR_AGREGADO
VALOR_AGREGADO$sigma_cuadrada<-log(sigma/2)
VALOR_AGREGADO$log_x3<-log(VALOR_AGREGADO$x_3_inversion)
model<-lm(sigma_cuadrada)~x_3 data= VALOR_AGREGADO
VALOR_AGREGADO$sigma_cuadrada<-log(sigma/2)
VALOR_AGREGADO$log_x3<-log(VALOR_AGREGADO$x_3_inversion)
model<-lm(sigma_cuadrada)~x_3_inversion data= VALOR_AGREGADO
VALOR_AGREGADO$sigma_cuadrada<-log(sigma/2)
VALOR_AGREGADO$log_x3<-log(VALOR_AGREGADO$x_3_inversion)
model<-lm(sigma_cuadrada~x3, data= VALOR_AGREGADO)
VALOR_AGREGADO$sigma_cuadrada<-log(sigma/2)
VALOR_AGREGADO$log_x3<-log(VALOR_AGREGADO$x_3_inversion)
model<-lm(sigma_cuadrada~x3), data= VALOR_AGREGADO
VALOR_AGREGADO$sigma_cuadrada<-log(sigma/2)
VALOR_AGREGADO$log_x3<-log(VALOR_AGREGADO$x_3_inversion)
model<-lm(sigma_cuadrada~x3), data= VALOR_AGREGADO
VALOR_AGREGADO$sigma_cuadrada<-log(sigma/2)
VALOR_AGREGADO$log_x3<-log(VALOR_AGREGADO$x_3_inversion)
model<-lm(sigma_cuadrada~log_x3), data= VALOR_AGREGADO
VALOR_AGREGADO$sigma_cuadrada<-log(sigma/2)
VALOR_AGREGADO$log_x3<-log(VALOR_AGREGADO$x_3_inversion)
model<-lm(sigma_cuadrada~log_x3, data= VALOR_AGREGADO)
Summary(model)
VALOR_AGREGADO$sigma_cuadrada<-log(sigma/2)
VALOR_AGREGADO$log_x3<-log(VALOR_AGREGADO$x_3_inversion)
model<-lm(sigma_cuadrada~log_x3, data= VALOR_AGREGADO)
summary(model)
VALOR_AGREGADO$sigma_cuadrada<-log(sigma/2)
VALOR_AGREGADO$log_x3<-log(VALOR_AGREGADO$x_3_inversion)
model<-lm(sigma_cuadrada~log_x3, data= VALOR_AGREGADO)
summary(model)
library(readr)
INGRESO_AHORRO <- read_csv("Estadistica Aplicada/INGRESO_AHORRO.csv")
View(INGRESO_AHORRO)
head(INGRESO_AHORRO)
colnames(INGRESO_AHORRO)<-c("observacion", "ahorro", "ingreso")
head(INGRESO_AHORRO)
INGRESO_AHORRO$ingreso_inverso<-1/INGRESO_AHORRO$ingreso
INGRESO_AHORRO$ahorro_inverso<-1/INGRESO_AHORRO$ahorro
INGRESO_AHORRO$ingreso_inverso
head(INGRESO_AHORRO)
model<-lm(ahorro_ingreso~ingreso_inverso, data=INGRESO_AHORRO)
model<-lm(ahorro_inverso~ingreso_inverso, data=INGRESO_AHORRO)
model<-lm(ahorro_inverso~ingreso_inverso, data=INGRESO_AHORRO)
model<-lm(ahorro_inverso~ingreso_inverso, data=INGRESO_AHORRO)
model<-lm(ahorro_inverso~ingreso_inverso, data=INGRESO_AHORRO)
model<-lm(ahorro_inverso~ingreso_inverso, data=INGRESO_AHORRO)
summary(model)
INGRESO_AHORRO$ingreso_inverso<-1/INGRESO_AHORRO$ingreso
INGRESO_AHORRO$ahorro_ingreso<-1/INGRESO_AHORRO$ahorro
INGRESO_AHORRO$ingreso_inverso
head(INGRESO_AHORRO)
INGRESO_AHORRO$ingreso_inverso<-1/INGRESO_AHORRO$ingreso
INGRESO_AHORRO$ahorro_ingreso<-1/INGRESO_AHORRO$ahorro
INGRESO_AHORRO$ingreso_inverso
head(INGRESO_AHORRO)
model<-lm(ahorro_ingreso~ingreso_inverso, data=INGRESO_AHORRO)
summary(model)
res_<-obsresiduals(model)
res_<-obs(residuals(model))
res_<-residuals(model)
INGRESO_AHORRO$ingreso_inverso<-1/INGRESO_AHORRO$ingreso
INGRESO_AHORRO$ahorro_ingreso<-INGRESO_AHORRO$ahorro*INGRESO_AHORRO$ingreso_inverso
head(INGRESO_AHORRO)
model<-lm(ahorro_ingreso~ingreso_inverso, data=INGRESO_AHORRO)
summary(model)
res_<-residuals(model)
INGRESO_AHORRO$residuals<- res_
INGRESO_AHORRO$residuals_2<-res_^2
head(INGRESO_AHORRO)
res_<-residuals(model)
INGRESO_AHORRO$residuals<- res_
INGRESO_AHORRO$residuals_2<-res_^2
INGRESO_AHORRO$log_ingreso_inverso<-log(INGRESO_AHORRO$ingreso_inverso)
head(INGRESO_AHORRO)
model_park<-lm(residuals_2 ~ log_ingreso_inverso, data= INGRESO_AHORRO
summary(model)
model_park<-lm(residuals_2 ~ log_ingreso_inverso, data= INGRESO_AHORRO
summary(model_park)
library(readr)
INGRESO_AHORRO <- read_csv("Estadistica Aplicada/INGRESO_AHORRO.csv")
View(INGRESO_AHORRO)
head(INGRESO_AHORRO)
colnames(INGRESO_AHORRO)<-c("observacion", "ahorro", "ingreso")
head(INGRESO_AHORRO)
install.packages("strucchange")
library(strucchange)
sctest(INGRESO_AHORRO$ahorro~INGRESO_AHORRO$ingreso, type ="Chow", point=13)
plot(INGRESO_AHORRO$ingreso, INGRESO_AHORRO$ahorro)
#| label: setup
#| include: false
library(ggplot2)
library(dplyr)
library(gridExtra)
library(knitr)
library(kableExtra)
library(RColorBrewer)
library(plotly)
set.seed(123)  # Para reproducibilidad
# Parámetro de la distribución exponencial
lambda <- 1.5
# Número de simulaciones
num_sim <- 1000
# Valores de n a analizar
n_values <- c(5, 10, 20)
# Bucle para cada valor de n
for (n in n_values) {
muestras <- replicate(num_sim, sum(rexp(n, rate = lambda)))
df <- data.frame(Suma = muestras)
media_teo <- n / lambda
var_teo <- n / (lambda^2)
#histograma con la densidad teórica
ggplot(df, aes(x = Suma)) +
geom_histogram(aes(y = ..density..), bins = 30,
fill = "skyblue", color = "black", alpha = 0.7) +
stat_function(fun = dgamma,
args = list(shape = n, rate = lambda),
color = "red", size = 1.2) +
labs(
title = paste("Suma de", n, "variables Exp(", lambda, ")", sep = ""),
subtitle = paste("Distribución teórica: Gamma(", n, ",", lambda, ")", sep = ""),
x = "Suma de variables exponenciales",
y = "Densidad"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12))
cat("\n-------------------------------------------\n")
cat("n =", n, "\n")
cat("Media teórica: ", round(media_teo, 4), "\n")
cat("Media simulada: ", round(mean(muestras), 4), "\n")
cat("Varianza teórica: ", round(var_teo, 4), "\n")
cat("Varianza simulada: ", round(var(muestras), 4), "\n")
cat("-------------------------------------------\n")
}
#| label: setup
#| include: false
library(ggplot2)
library(dplyr)
library(gridExtra)
library(knitr)
library(kableExtra)
library(RColorBrewer)
library(plotly)
set.seed(123)  # Para reproducibilidad
# Parámetro de la distribución exponencial
lambda <- 1.5
# Número de simulaciones
num_sim <- 1000
# Valores de n a analizar
n_values <- c(5, 10, 20)
# Bucle para cada valor de n
for (n in n_values) {
muestras <- replicate(num_sim, sum(rexp(n, rate = lambda)))
df <- data.frame(Suma = muestras)
media_teo <- n / lambda
var_teo <- n / (lambda^2)
#histograma con la densidad teórica
ggplot(df, aes(x = Suma)) +
geom_histogram(aes(y = ..density..), bins = 30,
fill = "skyblue", color = "black", alpha = 0.7) +
stat_function(fun = dgamma,
args = list(shape = n, rate = lambda),
color = "red", size = 1.2) +
labs(
title = paste("Suma de", n, "variables Exp(", lambda, ")", sep = ""),
subtitle = paste("Distribución teórica: Gamma(", n, ",", lambda, ")", sep = ""),
x = "Suma de variables exponenciales",
y = "Densidad"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12))
cat("\n-------------------------------------------\n")
cat("n =", n, "\n")
cat("Media teórica: ", round(media_teo, 4), "\n")
cat("Media simulada: ", round(mean(muestras), 4), "\n")
cat("Varianza teórica: ", round(var_teo, 4), "\n")
cat("Varianza simulada: ", round(var(muestras), 4), "\n")
cat("-------------------------------------------\n")
}
#| warning: false
# Generar muestra grande para comparación visual
muestra_grande <- rgamma(8000, shape = alpha_sim, rate = lambda_sim)
set.seed(123)  # Para reproducibilidad
# Parámetro de la distribución exponencial
lambda <- 1.5
# Número de simulaciones
num_sim <- 1000
# Valores de n a analizar
n_values <- c(5, 10, 20)
# Bucle para cada valor de n
for (n in n_values) {
muestras <- replicate(num_sim, sum(rexp(n, rate = lambda)))
df <- data.frame(Suma = muestras)
media_teo <- n / lambda
var_teo <- n / (lambda^2)
#histograma con la densidad teórica
ggplot(df, aes(x = Suma)) +
geom_histogram(aes(y = ..density..), bins = 30,
fill = "skyblue", color = "black", alpha = 0.7) +
stat_function(fun = dgamma,
args = list(shape = n, rate = lambda),
color = "red", size = 1.2) +
labs(
title = paste("Suma de", n, "variables Exp(", lambda, ")", sep = ""),
subtitle = paste("Distribución teórica: Gamma(", n, ",", lambda, ")", sep = ""),
x = "Suma de variables exponenciales",
y = "Densidad"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12))
cat("\n-------------------------------------------\n")
cat("n =", n, "\n")
cat("Media teórica: ", round(media_teo, 4), "\n")
cat("Media simulada: ", round(mean(muestras), 4), "\n")
cat("Varianza teórica: ", round(var_teo, 4), "\n")
cat("Varianza simulada: ", round(var(muestras), 4), "\n")
cat("-------------------------------------------\n")
}
set.seed(123)
# Parámetros de la distribución
alpha <- 2.5
lambda <- 1.8
# Media y varianza teóricas de la Gamma
media_teorica <- alpha / lambda
var_teorica <- alpha / (lambda^2)
# Tamaños de muestra
n_values <- c(5, 10, 20, 30, 50, 100)
num_sim <- 1000
resultados <- data.frame()
for (n in n_values) {
# Generar 1000 muestras de tamaño n
muestras <- replicate(num_sim, mean(rgamma(n, shape = alpha, rate = lambda)))
# Calcular media y varianza empíricas de las medias muestrales
media_emp <- mean(muestras)
var_emp <- var(muestras)
var_teorica_media <- var_teorica / n
resultados <- rbind(resultados, data.frame(
n = n,
Media_Empírica = media_emp,
Media_Teórica = media_teorica,
Var_Empírica = var_emp,
Var_Teórica = var_teorica_media
))
# --- Graficar histogramas con curva normal teórica ---
df <- data.frame(media_muestral = muestras)
ggplot(df, aes(x = media_muestral)) +
geom_histogram(aes(y = ..density..),
bins = 30, fill = "lightblue", color = "white") +
stat_function(fun = dnorm,
args = list(mean = media_teorica,
sd = sqrt(var_teorica_media)),
color = "red", linewidth = 1.2) +
labs(title = paste("Distribución de Medias Muestrales (n =", n, ")"),
subtitle = "Comparación con la Normal teórica (TCL)",
x = "Media muestral", y = "Densidad") +
theme_minimal()
readline(prompt = "Presiona [Enter] para continuar con el siguiente n...")
}
